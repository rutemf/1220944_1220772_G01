{
	"info": {
		"_postman_id": "9b0f07ff-cea8-4a19-bd41-e10e5910537c",
		"name": "Psoft-G1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34875941",
		"_collection_link": "https://grupo-psoft.postman.co/workspace/Grupo-PSOFT-Workspace~e27c9350-24bd-4286-87e6-a74f3667d271/collection/35087629-9b0f07ff-cea8-4a19-bd41-e10e5910537c?action=share&source=collection_link&creator=34875941"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login as Librarian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authtenticates\", function(){\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let token = postman.getResponseHeader(\"Authorization\");\r",
									"    pm.environment.set(\"librarianToken\", token);    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{baseUrl}}/public/login",
							"host": [
								"{{host}}{{baseUrl}}"
							],
							"path": [
								"public",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as Manuel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authtenticates\", function(){\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let token = postman.getResponseHeader(\"Authorization\");\r",
									"    pm.environment.set(\"readerToken\", token);    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{baseUrl}}/public/login",
							"host": [
								"{{host}}{{baseUrl}}"
							],
							"path": [
								"public",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as Pedro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authtenticates\", function(){\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let token = postman.getResponseHeader(\"Authorization\");\r",
									"    pm.environment.set(\"readerToken\", token);    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"pedro@gmail.com\",\r\n    \"password\": \"Pedrodascenas!123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{baseUrl}}/public/login",
							"host": [
								"{{host}}{{baseUrl}}"
							],
							"path": [
								"public",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Author",
			"item": [
				{
					"name": "As Reader",
					"item": [
						{
							"name": "Login as Manuel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Authtenticates\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    let token = postman.getResponseHeader(\"Authorization\");\r",
											"    pm.environment.set(\"readerToken\", token);    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/public/login",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"public",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "FindBooksByAuthorNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/7/books",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"7",
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Author By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/3",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Author By Id - Author doesnt exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not found\", function(){\r",
											"\r",
											"    pm.response.to.have.status(404);    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/30",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"30"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchByAuthorName",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors?name=A",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors"
									],
									"query": [
										{
											"key": "name",
											"value": "A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "KnowCoAuthors- AuthorNumber 7",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/7/coauthors",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"7",
										"coauthors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Top5Authors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/top5",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"top5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gets a author photo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/2/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"2",
										"photo"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{readerToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "As Librarian",
					"item": [
						{
							"name": "Login as Librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Authtenticates\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    let token = postman.getResponseHeader(\"Authorization\");\r",
											"    pm.environment.set(\"librarianToken\", token);    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/public/login",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"public",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateAuthor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created\", function(){\r",
											"\r",
											"    pm.response.to.have.status(201); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Irineu José",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "bio do Irineu José",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateAuthor - w/ photo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created\", function(){\r",
											"\r",
											"    pm.response.to.have.status(201); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "photo",
											"type": "file",
											"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8"
										},
										{
											"key": "name",
											"value": "Irineu José",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Bio do ireneu José",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateAuthor - blank bio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request\", function(){\r",
											"\r",
											"    pm.response.to.have.status(400); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Irineu José\",\r\n    \"bio\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Author By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ETag",
										"value": "{{authorEtag}}"
									}
								],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/7",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get photo of an Author - AuthorNumber7",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{librarianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "If-Match",
										"value": "{{authorEtag}}"
									}
								],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/7/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"7",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{librarianToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "{{authorEtag}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Alexandre Pereiraa\",\r\n    \"bio\":\"Alexandre Pereira é licenciado e mestre em Engenharia Electrotécnica e de Computadores, pelo Instituto Superior Técnico..\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/3",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete photo as Librarian - SUCCESS",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{librarianToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "{{authorEtag}}"
									}
								],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/2/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"2",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete photo as Reader - INSUCCESS",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/authors/2/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"authors",
										"2",
										"photo"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{librarianToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "As Reader",
					"item": [
						{
							"name": "FindBooksByGenre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books?genre=Inf",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "genre",
											"value": "Inf"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBookByIsbn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/9789896379636",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"9789896379636"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBookByIsbn - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not Found\", function(){\r",
											"\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/9782722203426",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"9782722203426"
									]
								}
							},
							"response": []
						},
						{
							"name": "FindBooksByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books?title=o",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "title",
											"value": "o"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "FindBooksByAuthorName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books?authorName=Antonio",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "authorName",
											"value": "Antonio"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get book photo as reader",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/9789722328296/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"9789722328296",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Books",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"title\" : \"\",\r\n        \"genre\" : \"\",\r\n        \"authorName\" : \"ma\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/search",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{readerToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "As Librarian",
					"item": [
						{
							"name": "GetAverageLendings",
							"item": [
								{
									"name": "GetAverageLendings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendings?period=day&start=2024-05-01&end=2024-05-31",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendings"
											],
											"query": [
												{
													"key": "period",
													"value": "day"
												},
												{
													"key": "start",
													"value": "2024-05-01"
												},
												{
													"key": "end",
													"value": "2024-05-31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendings - invalid dates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendings?period=month&start=2024-06-01&end=2024-05-31",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendings"
											],
											"query": [
												{
													"key": "period",
													"value": "month"
												},
												{
													"key": "start",
													"value": "2024-06-01"
												},
												{
													"key": "end",
													"value": "2024-05-31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendings - invalid date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendings?period=day&start=2024-35-01&end=2024-05-31",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendings"
											],
											"query": [
												{
													"key": "period",
													"value": "day"
												},
												{
													"key": "start",
													"value": "2024-35-01"
												},
												{
													"key": "end",
													"value": "2024-05-31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendings - invalid period Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendings?period=dia&start=2024-05-01&end=2024-05-31",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendings"
											],
											"query": [
												{
													"key": "period",
													"value": "dia"
												},
												{
													"key": "start",
													"value": "2024-05-01"
												},
												{
													"key": "end",
													"value": "2024-05-31"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetTop5ReaderByGenre",
							"item": [
								{
									"name": "getTop5ReaderByGenre",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/top5ByGenre?genre=Infantil&startDate=2024-01-01&endDate=2024-06-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"top5ByGenre"
											],
											"query": [
												{
													"key": "genre",
													"value": "Infantil"
												},
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-06-01"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Book",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "genre",
											"value": "Infantil",
											"type": "text"
										},
										{
											"key": "description",
											"value": "os irmaos q dançaram",
											"type": "text"
										},
										{
											"key": "title",
											"value": "aulas de samba",
											"type": "text"
										},
										{
											"key": "authors[]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "photo",
											"type": "file",
											"src": "/home/goncalo/Desktop/panda1.jpeg"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/9789725680001",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"9789725680001"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Book",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "0",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "description ",
											"value": "olá olá",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8080/api/books/9782722203402",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"books",
										"9782722203402"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Book by ISBN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/9789722328296",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"9789722328296"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Books By genre",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/books?genre=Inf",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "genre",
											"value": "Inf"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Top 5 Books Lent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/top5",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"top5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Top 5 Genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/genres/top5",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"genres",
										"top5"
									]
								}
							},
							"response": []
						},
						{
							"name": "getLendingsPerMonthLastYearByGenre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/genres/lendingsPerMonthLastTwelveMonths",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"genres",
										"lendingsPerMonthLastTwelveMonths"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAverageLendingsPerGenre",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"year\" : 2024,\r\n        \"month\" : 5\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/genres/avgLendingsPerGenre",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"genres",
										"avgLendingsPerGenre"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Book photo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/9896603359/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"9896603359",
										"photo"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{librarianToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Reader",
			"item": [
				{
					"name": "As Reader",
					"item": [
						{
							"name": "GetReaderLendingsByIsbn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/2024/1/lendings?isbn=9782722203402",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"2024",
										"1",
										"lendings"
									],
									"query": [
										{
											"key": "isbn",
											"value": "9782722203402"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetReaderLendingsByIsbn - invalid isbn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not Found\", function(){\r",
											"\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/2024/1/lendings?isbn=9782722203403",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"2024",
										"1",
										"lendings"
									],
									"query": [
										{
											"key": "isbn",
											"value": "9782722203403"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Book Suggestions As Reader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not Found\", function(){\r",
											"\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/books/suggestions",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"books",
										"suggestions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete photo as Reader - SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/api/readers/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"api",
										"readers",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get photo as Reader",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Data as Reader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){",
											"    pm.response.to.have.status(200); ",
											"",
											"    let etagHeader = postman.getResponseHeader(\"ETag\");",
											"    pm.environment.set(\"readerEtag\", etagHeader);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "{{readerEtag}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fullName",
											"value": "Nome novo aqui",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "Fantasia",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{readerToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "As Librarian",
					"item": [
						{
							"name": "GetTop5ReadersByGenreForCertainTime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/top5ByGenre?genre=Infantil&startDate=2024-01-01&endDate=2024-06-30",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"top5ByGenre"
									],
									"query": [
										{
											"key": "genre",
											"value": "Infantil"
										},
										{
											"key": "startDate",
											"value": "2024-01-01"
										},
										{
											"key": "endDate",
											"value": "2024-06-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTop5ReadersByGenreForCertainTime - invalid genre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not Found\", function(){\r",
											"\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/top5ByGenre?genre=Comédia&startDate=2024-01-01&endDate=2024-06-30",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"top5ByGenre"
									],
									"query": [
										{
											"key": "genre",
											"value": "Comédia"
										},
										{
											"key": "startDate",
											"value": "2024-01-01"
										},
										{
											"key": "endDate",
											"value": "2024-06-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Top 5 Readers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not Found\", function(){\r",
											"\r",
											"    pm.response.to.have.status(404); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{librarianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/top5",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"top5"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetReaderByName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers?name=as",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers"
									],
									"query": [
										{
											"key": "name",
											"value": "as"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get readers by PhoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers?name=as",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers"
									],
									"query": [
										{
											"key": "name",
											"value": "as"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reader Photo - SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{librarianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/2024/1/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"2024",
										"1",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reader Photo - 404 No Reader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"NOT FOUND\", function(){",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{readerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/2024/999/photo",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"2024",
										"999",
										"photo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reader by reader number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){",
											"    pm.response.to.have.status(200); ",
											"",
											"    let etagHeader = postman.getResponseHeader(\"ETag\");",
											"    pm.environment.set(\"readerEtag\", etagHeader); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{librarianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers/2024/6",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers",
										"2024",
										"6"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{librarianToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "As Anonymous",
					"item": [
						{
							"name": "Register as Reader with photo and no interests - SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATED\", function(){",
											"",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "umemail@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "PassBrava!123",
											"type": "text"
										},
										{
											"key": "fullName",
											"value": "Ricardo França",
											"type": "text"
										},
										{
											"key": "birthDate",
											"value": "1994-04-08",
											"type": "text"
										},
										{
											"key": "phoneNumber",
											"value": "912345678",
											"type": "text"
										},
										{
											"key": "gdpr",
											"value": "true",
											"type": "text"
										},
										{
											"key": "marketing",
											"value": "true",
											"type": "text"
										},
										{
											"key": "thirdParty",
											"value": "true",
											"type": "text"
										},
										{
											"key": "photo",
											"type": "file",
											"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register as Reader with interests and no photo - 404 Genre invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"NOT FOUND\", function(){",
											"",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "1220956@isep.ipp.pt",
											"type": "text"
										},
										{
											"key": "password",
											"value": "PasswordSuper!123",
											"type": "text"
										},
										{
											"key": "fullName",
											"value": "Eduardo Sarapinto da Silveira",
											"type": "text"
										},
										{
											"key": "birthDate",
											"value": "2004-03-17",
											"type": "text"
										},
										{
											"key": "phoneNumber",
											"value": "987314512",
											"type": "text"
										},
										{
											"key": "gdpr",
											"value": "true",
											"type": "text"
										},
										{
											"key": "marketing",
											"value": "false",
											"type": "text"
										},
										{
											"key": "thirdParty",
											"value": "false",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "Fantasia",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "Infantil",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "gregergegerg ",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register as Reader with interests and no photo - SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATED\", function(){",
											"",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "1220956@isep.ipp.pt",
											"type": "text"
										},
										{
											"key": "password",
											"value": "PasswordSuper!123",
											"type": "text"
										},
										{
											"key": "fullName",
											"value": "Eduardo Sarapinto da Silveira",
											"type": "text"
										},
										{
											"key": "birthDate",
											"value": "2004-03-17",
											"type": "text"
										},
										{
											"key": "phoneNumber",
											"value": "987314512",
											"type": "text"
										},
										{
											"key": "gdpr",
											"value": "true",
											"type": "text"
										},
										{
											"key": "marketing",
											"value": "false",
											"type": "text"
										},
										{
											"key": "thirdParty",
											"value": "false",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "Fantasia",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "Infantil",
											"type": "text"
										},
										{
											"key": "interestList[]",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/readers",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"readers"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Lendings",
			"item": [
				{
					"name": "As Reader",
					"item": [
						{
							"name": "ReaderGetLending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let lending = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"lendingEtag\", lending); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{baseUrl}}/lendings/2024/13",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"lendings",
										"2024",
										"13"
									]
								}
							},
							"response": []
						},
						{
							"name": "SetReturned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"\r",
											"    let author = postman.getResponseHeader(\"ETag\");\r",
											"    pm.environment.set(\"authorEtag\", author); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "{{lendingEtag}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"commentary\": \"Não gostei\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/lendings/2024/13",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"lendings",
										"2024",
										"13"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{readerToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "As Librarian",
					"item": [
						{
							"name": "Lend Book",
							"item": [
								{
									"name": "LendBook",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){\r",
													"\r",
													"    pm.response.to.have.status(201); \r",
													"\r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook - Reader has 3 lendings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook - Reader has overdue lendings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetAverageDuration",
							"item": [
								{
									"name": "GetAverageDuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);  \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/avgDuration",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"avgDuration"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetLending",
							"item": [
								{
									"name": "GetLending - not returned, not over limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    let lending = pm.response.headers.get(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).not.to.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/35",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"35"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetLending - returned, not over limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"    \r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/13",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetLending - not returned, overdue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"    \r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/8",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetLending - returned, over limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"    \r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/3",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"3"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetOverdueLendings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK\", function(){\r",
											"\r",
											"    pm.response.to.have.status(200); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"number\": 1,\r\n    \"limit\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{baseUrl}}/lendings/overdue",
									"host": [
										"{{host}}{{baseUrl}}"
									],
									"path": [
										"lendings",
										"overdue"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{librarianToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "UserStories",
			"item": [
				{
					"name": "Phase 1",
					"item": [
						{
							"name": "US 3 -  As Librarian I want to register an author",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateAuthor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){\r",
													"\r",
													"    pm.response.to.have.status(201); \r",
													"\r",
													"    let author = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"authorEtag\", author); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Irineu José",
													"type": "text"
												},
												{
													"key": "bio",
													"value": "bio do Irineu José",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateAuthor - blank bio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Irineu José\",\r\n    \"bio\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 4 -  As Librarian I want to update an author’s data",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Author By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"\r",
													"    let author = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"authorEtag\", author); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/3",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Author",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"\r",
													"    let author = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"authorEtag\", author); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "If-Match",
												"value": "{{authorEtag}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Alexandre Pereira\",\r\n    \"bio\":\"Alexandre Pereira é licenciado e mestre em Engenharia Electrotécnica e de Computadores, pelo Instituto Superior Técnico.\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/3",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"3"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 5 -  As Librarian or Reader I want to know an author’s detail given its author number",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Author By authorNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"\r",
													"    let author = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"authorEtag\", author); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/7",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Author By authorNumber - AuthorNumber Nao existe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"NOT FOUND\", function(){\r",
													"\r",
													"    pm.response.to.have.status(404); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/70",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"70"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 6 - As Librarian or Reader I want to search authors by name",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SearchByAuthorName",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors?name=A",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors"
											],
											"query": [
												{
													"key": "name",
													"value": "A"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 7 -  As Librarian I want to register a book",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Book",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){",
													"",
													"    pm.response.to.have.status(201); ",
													"",
													"    let book = postman.getResponseHeader(\"ETag\");",
													"    pm.environment.set(\"bookETag\", book); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "genre",
													"value": "Infantil",
													"type": "text"
												},
												{
													"key": "description",
													"value": "os irmaos q dançaram",
													"type": "text"
												},
												{
													"key": "title",
													"value": "aulas de samba",
													"type": "text"
												},
												{
													"key": "authors[]",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "http://localhost:8080/api/books/9789722363808",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"books",
												"9789722363808"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Book - blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad request\", function(){",
													"",
													"    pm.response.to.have.status(400); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "genre",
													"value": "Infantil",
													"type": "text"
												},
												{
													"key": "description",
													"value": "os irmaos q dançaram",
													"type": "text"
												},
												{
													"key": "title",
													"value": "aulas de samba",
													"type": "text"
												},
												{
													"key": "authors[]",
													"value": "\"\"",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "http://localhost:8080/api/books/9789725680001",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"books",
												"9789725680001"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 8 -  As Librarian I want to update a book",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Book",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){",
													"",
													"    pm.response.to.have.status(200); ",
													"",
													"    let book = postman.getResponseHeader(\"ETag\");",
													"    pm.environment.set(\"bookETag\", book); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "If-Match",
												"value": "0",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "description ",
													"value": "olá olá",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "http://localhost:8080/api/books/9782722203402",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"books",
												"9782722203402"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 9 -  As Reader/Librarian I want to get books details by isbn",
							"item": [
								{
									"name": "Login as Reader",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Book by ISBN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"\r",
													"    let book = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"bookETag\", book); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/books/9789896379636",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books",
												"9789896379636"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 10 -  As Reader/Librarian I want to get books by genre",
							"item": [
								{
									"name": "Login as Reader",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Books By genre",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){",
													"",
													"    pm.response.to.have.status(200); ",
													"",
													"    let book = postman.getResponseHeader(\"ETag\");",
													"    pm.environment.set(\"bookETag\", book); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/books?genre=Inf",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books"
											],
											"query": [
												{
													"key": "genre",
													"value": "Inf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 11 -  As anonymous I want to register as reader",
							"item": [
								{
									"name": "Register as Reader with photo and no interests - SUCCESS Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CREATED\", function(){",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "email.super.random@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "PasswordSuprema!123",
													"type": "text"
												},
												{
													"key": "fullName",
													"value": "Zeca Estacionancio",
													"type": "text"
												},
												{
													"key": "birthDate",
													"value": "1994-04-08",
													"type": "text"
												},
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "gdpr",
													"value": "true",
													"type": "text"
												},
												{
													"key": "marketing",
													"value": "true",
													"type": "text"
												},
												{
													"key": "thirdParty",
													"value": "false",
													"type": "text"
												},
												{
													"key": "photo",
													"type": "file",
													"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 12 - As Reader I want to update my data such as phone Number",
							"item": [
								{
									"name": "Login as Pedro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"pedro@gmail.com\",\r\n    \"password\": \"Pedrodascenas!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get current eTag version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let etagVersion = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"readerEtag\", etagVersion);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"pedro@gmail.com\",\r\n    \"password\": \"Pedrodascenas!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Data as Reader Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){",
													"    pm.response.to.have.status(200); ",
													"",
													"    let etagHeader = postman.getResponseHeader(\"ETag\");",
													"    pm.environment.set(\"readerEtag\", etagHeader);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "If-Match",
												"value": "{{readerEtag}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "interestList[]",
													"value": "Fantasia",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update data as Reader - INVALID PHONE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"BAD REQUEST\", function(){",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "If-Match",
												"value": "{{readerEtag}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "phoneNumber",
													"value": "91919",
													"type": "text"
												},
												{
													"key": "interestList[]",
													"value": "Fantasia",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 13 - As librarian get user details from reader number",
							"item": [
								{
									"name": "Get reader by reader number - VALID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/2024/6",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"2024",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reader by reader number - NOT VALID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"NOT FOUND\", function(){",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/2024/999",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"2024",
												"999"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 14 - As librarian search users by name",
							"item": [
								{
									"name": "Search Reader By Name - VALID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers?name=Manuel",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											],
											"query": [
												{
													"key": "name",
													"value": "Manuel"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Reader By Name - NO RESULTS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"NOT FOUND\", function(){\r",
													"    pm.response.to.have.status(404); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers?name=NomeInvalido",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											],
											"query": [
												{
													"key": "name",
													"value": "NomeInvalido"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 15 - Lend Book",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){\r",
													"\r",
													"    pm.response.to.have.status(201); \r",
													"\r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).not.to.be.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/8\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){\r",
													"\r",
													"    pm.response.to.have.status(201); \r",
													"\r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).not.to.be.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/8\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){\r",
													"\r",
													"    pm.response.to.have.status(201); \r",
													"\r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).not.to.be.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/8\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook 4 Fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"\r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/8\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								},
								{
									"name": "LendBook - Reader has overdue lendings Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isbn\": \"9782722203402\",\r\n    \"readerNumber\": \"2024/1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 16 - Return Book",
							"item": [
								{
									"name": "Login as Pedro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"pedro@gmail.com\",\r\n    \"password\": \"Pedrodascenas!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SetReturned - without ETag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "If-Match",
												"value": "{{lendingEtag}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"commentary\" : \"Não gostei\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/8",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetLending",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"    pm.response.to.have.status(200); \r",
													"\r",
													"    let lending = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"lendingEtag\", lending); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/8",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "SetReturned - Success Over Limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"\r",
													"    let author = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"authorEtag\", author); \r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
													"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
													"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
													"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "If-Match",
												"value": "{{lendingEtag}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"commentary\": \"Não gostei\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/2024/8",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"2024",
												"8"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{readerToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 17 - Get Lending",
							"item": [
								{
									"name": "As Librarian",
									"item": [
										{
											"name": "Login as Librarian",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Authtenticates\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200);\r",
															"\r",
															"    let token = postman.getResponseHeader(\"Authorization\");\r",
															"    pm.environment.set(\"librarianToken\", token);    \r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}{{baseUrl}}/public/login",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"public",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - not returned, not over limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    let lending = pm.response.headers.get(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending);\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is not null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).not.to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/35",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"35"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - returned, not over limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/13",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"13"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - not returned, overdue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/8",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"8"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - returned, over limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/3",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"3"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{librarianToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "As Reader",
									"item": [
										{
											"name": "Login as Manuel",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Authtenticates\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200);\r",
															"\r",
															"    let token = postman.getResponseHeader(\"Authorization\");\r",
															"    pm.environment.set(\"readerToken\", token);    \r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}{{baseUrl}}/public/login",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"public",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - wrong reader",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Unauthorized\", function(){\r",
															"\r",
															"    pm.response.to.have.status(403); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/2",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"2"
													]
												}
											},
											"response": []
										},
										{
											"name": "Login as Pedro",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Authtenticates\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200);\r",
															"\r",
															"    let token = postman.getResponseHeader(\"Authorization\");\r",
															"    pm.environment.set(\"readerToken\", token);    \r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"pedro@gmail.com\",\r\n    \"password\": \"Pedrodascenas!123\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}{{baseUrl}}/public/login",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"public",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - not returned, not over limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    let lending = pm.response.headers.get(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending);\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is not null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).not.to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/43",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"43"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - returned, not over limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/20",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"20"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - not returned, overdue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/8",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"8"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetLending - returned, over limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OK\", function(){\r",
															"\r",
															"    pm.response.to.have.status(200); \r",
															"    \r",
															"    let lending = postman.getResponseHeader(\"ETag\");\r",
															"    pm.environment.set(\"lendingEtag\", lending); \r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'returnedDate' is not null\", function () {\r",
															"    pm.expect(pm.response.json().returnedDate).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysOverdue' is not null\", function () {\r",
															"    pm.expect(pm.response.json().daysOverdue).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Check if 'daysUntilReturn' is null\", function () {\r",
															"    pm.expect(pm.response.json().daysUntilReturn).to.be.null;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{baseUrl}}/lendings/2024/2",
													"host": [
														"{{host}}{{baseUrl}}"
													],
													"path": [
														"lendings",
														"2024",
														"2"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{readerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Phase 2",
					"item": [
						{
							"name": "US 3 -  As Librarian I want to register an author w/Photo",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateAuthor - w/ photo Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){\r",
													"\r",
													"    pm.response.to.have.status(201); \r",
													"\r",
													"    let author = postman.getResponseHeader(\"ETag\");\r",
													"    pm.environment.set(\"authorEtag\", author); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "photo",
													"type": "file",
													"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8"
												},
												{
													"key": "name",
													"value": "Irineu José",
													"type": "text"
												},
												{
													"key": "bio",
													"value": "Bio do ireneu José",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateAuthor - blank name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"bio\": \"Bio de Irineu José\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 4 - As Reader I want to know the books of an Author",
							"item": [
								{
									"name": "Login as Manuel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "FindBooksByAuthorNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/7/books",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"7",
												"books"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 5 - As Reader I want to Know CoAuthors",
							"item": [
								{
									"name": "Login as Manuel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "KnowCoAuthors- AuthorNumber 7",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/7/coauthors",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"7",
												"coauthors"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{readerToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 6 - As Reader I want to know the Top 5 authors",
							"item": [
								{
									"name": "Login as Manuel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Top5Authors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/authors/top5",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"authors",
												"top5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 7 -  As Librarian I want to register a book",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Book",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created\", function(){",
													"",
													"    pm.response.to.have.status(201); ",
													"",
													"    let book = postman.getResponseHeader(\"ETag\");",
													"    pm.environment.set(\"bookETag\", book); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "genre",
													"value": "Infantil",
													"type": "text"
												},
												{
													"key": "description",
													"value": "os irmaos q dançaram",
													"type": "text"
												},
												{
													"key": "title",
													"value": "aulas de samba",
													"type": "text"
												},
												{
													"key": "authors[]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "photo",
													"type": "file",
													"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8"
												}
											]
										},
										"url": {
											"raw": "http://localhost:8080/api/books/9789725680001",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"books",
												"9789725680001"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Book - blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad request\", function(){",
													"",
													"    pm.response.to.have.status(400); ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "genre",
													"value": "Infantil",
													"type": "text"
												},
												{
													"key": "description",
													"value": "os irmaos q dançaram",
													"type": "text"
												},
												{
													"key": "title",
													"value": "aulas de samba",
													"type": "text"
												},
												{
													"key": "authors[]",
													"value": "\"\"",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "http://localhost:8080/api/books/9789725680001",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"books",
												"9789725680001"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 8 -  As Reader I want to get book by title",
							"item": [
								{
									"name": "Login as Reader",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"manuel@gmail.com\",\r\n    \"password\": \"Manuelino123!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "FindBooksByTitle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/books?title=o",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books"
											],
											"query": [
												{
													"key": "title",
													"value": "o"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 9 -  As Librarian I want to get top 5 books lent",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Top 5 Books Lent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/books/top5",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books",
												"top5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 10 -  As Librarian I want to get top 5 genres by books",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Top 5 Genres",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/top5",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"top5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 11 -  As Librarian I want to get the Top 5 Readers",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Top 5 Readers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/top5",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"top5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 12 - As anonymous I want to register with optional photo and optional interest list",
							"item": [
								{
									"name": "With photo and no interest - SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CREATED\", function(){",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "primeira-tentativa@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "PasswordSuprema!123",
													"type": "text"
												},
												{
													"key": "fullName",
													"value": "Josefino Santos",
													"type": "text"
												},
												{
													"key": "birthDate",
													"value": "1994-04-08",
													"type": "text"
												},
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "gdpr",
													"value": "true",
													"type": "text"
												},
												{
													"key": "marketing",
													"value": "true",
													"type": "text"
												},
												{
													"key": "thirdParty",
													"value": "false",
													"type": "text"
												},
												{
													"key": "photo",
													"type": "file",
													"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								},
								{
									"name": "With interest but no photo - SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CREATED\", function(){",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "segunda-tentativa@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "PasswordSuprema!123",
													"type": "text"
												},
												{
													"key": "fullName",
													"value": "Mais um neca",
													"type": "text"
												},
												{
													"key": "birthDate",
													"value": "1994-04-08",
													"type": "text"
												},
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "gdpr",
													"value": "true",
													"type": "text"
												},
												{
													"key": "marketing",
													"value": "true",
													"type": "text"
												},
												{
													"key": "thirdParty",
													"value": "false",
													"type": "text"
												},
												{
													"key": "interestList[]",
													"value": "Infantil",
													"type": "text"
												},
												{
													"key": "interestList[]",
													"value": "Fantasia",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								},
								{
									"name": "With both - SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"CREATED\", function(){",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "terceira-tentativa@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "PasswordSuprema!123",
													"type": "text"
												},
												{
													"key": "fullName",
													"value": "Cuidado Candido",
													"type": "text"
												},
												{
													"key": "birthDate",
													"value": "1994-04-08",
													"type": "text"
												},
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "gdpr",
													"value": "true",
													"type": "text"
												},
												{
													"key": "marketing",
													"value": "true",
													"type": "text"
												},
												{
													"key": "thirdParty",
													"value": "false",
													"type": "text"
												},
												{
													"key": "photo",
													"type": "file",
													"src": "postman-cloud:///1ef246f7-ca36-4eb0-bb95-c3e42b79d5c8"
												},
												{
													"key": "interestList[]",
													"value": "Fantasia",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not valid file format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"BAD REQUEST\", function(){",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "eia-que-estalo@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "PasswordSuprema!123",
													"type": "text"
												},
												{
													"key": "fullName",
													"value": "Que puto de estouro",
													"type": "text"
												},
												{
													"key": "birthDate",
													"value": "1994-04-08",
													"type": "text"
												},
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "gdpr",
													"value": "true",
													"type": "text"
												},
												{
													"key": "marketing",
													"value": "true",
													"type": "text"
												},
												{
													"key": "thirdParty",
													"value": "false",
													"type": "text"
												},
												{
													"key": "photo",
													"type": "file",
													"src": "postman-cloud:///1ef275ed-3f2a-4b80-a1e2-53dd4e516a94"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not valid Genre",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"NOT FOUND\", function(){",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "ja-tombaste-nabo@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "PasswordSuprema!123",
													"type": "text"
												},
												{
													"key": "fullName",
													"value": "Pimba na beiça",
													"type": "text"
												},
												{
													"key": "birthDate",
													"value": "1994-04-08",
													"type": "text"
												},
												{
													"key": "phoneNumber",
													"value": "934328114",
													"type": "text"
												},
												{
													"key": "gdpr",
													"value": "true",
													"type": "text"
												},
												{
													"key": "marketing",
													"value": "true",
													"type": "text"
												},
												{
													"key": "thirdParty",
													"value": "false",
													"type": "text"
												},
												{
													"key": "interestList[]",
													"value": "GenreNotValid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 13 - As Reader I want a list of book suggestions based on my interest list",
							"item": [
								{
									"name": "Login as Reader with Interest List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"segunda-tentativa@gmail.com\",\r\n    \"password\": \"PasswordSuprema!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Suggestions as Reader with valid Interest List Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/books/suggestions",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books",
												"suggestions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login as reader with no suggestions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"readerToken\", token);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"primeira-tentativa@gmail.com\",\r\n    \"password\": \"PasswordSuprema!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Suggestions as Reader with valid Interest List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"NOT FOUND\", function(){\r",
													"\r",
													"    pm.response.to.have.status(404); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/books/suggestions",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books",
												"suggestions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 14 - Get Average Lendings On A Month",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendingsPerGenre - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"year\" : 2024,\r\n        \"month\" : 6\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendingsPerGenre",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendingsPerGenre"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendingsPerGenre - Invalid date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"year\" : 2024,\r\n        \"month\" : 13\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendingsPerGenre",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendingsPerGenre"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendingsPerGenre - Invalid page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": {\r\n        \"number\" : 0,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"year\" : 2024,\r\n        \"month\" : 3\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendingsPerGenre",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendingsPerGenre"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendingsPerGenre - Invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"year\" : 2024,\r\n        \"month\" : 3\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/avgLendingsPerGenre",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"avgLendingsPerGenre"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 15 - Get Average Lending Duration",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageDuration - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);  \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/avgDuration",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"avgDuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageDuration - Invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/avgDuration",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"avgDuration"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 23 - Get Overdue Lendings",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOverdueLendings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"number\": 1,\r\n    \"limit\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/overdue",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"overdue"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOverdueLendings - Invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"number\": 1,\r\n    \"limit\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/lendings/overdue",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"lendings",
												"overdue"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 16 - LendingsMonthLast12MonthsByGenre",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "getLendingsPerMonthLastYearByGenre - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/lendingsPerMonthLastTwelveMonths",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"lendingsPerMonthLastTwelveMonths"
											]
										}
									},
									"response": []
								},
								{
									"name": "getLendingsPerMonthLastYearByGenre - Invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/lendingsPerMonthLastTwelveMonths",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"lendingsPerMonthLastTwelveMonths"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 17 - Top 5 Readers Per Genre",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "getTop5ReaderByGenre - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/top5ByGenre?genre=Infantil&startDate=2024-01-01&endDate=2024-06-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"top5ByGenre"
											],
											"query": [
												{
													"key": "genre",
													"value": "Infantil"
												},
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-06-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "getTop5ReaderByGenre - Invalid Date 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/top5ByGenre?genre=Infantil&startDate=2024-02-01&endDate=2024-01-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"top5ByGenre"
											],
											"query": [
												{
													"key": "genre",
													"value": "Infantil"
												},
												{
													"key": "startDate",
													"value": "2024-02-01"
												},
												{
													"key": "endDate",
													"value": "2024-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "getTop5ReaderByGenre - Invalid Genre",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Not Found\", function(){\r",
													"\r",
													"    pm.response.to.have.status(404); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/top5ByGenre?genre=Infan&startDate=2024-01-01&endDate=2024-06-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"top5ByGenre"
											],
											"query": [
												{
													"key": "genre",
													"value": "Infan"
												},
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-06-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 18 - Search Lendings By Reader",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Lending per Month for Reader - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"name\" : \"\",\r\n        \"phoneNumber\" : \"939393939\",\r\n        \"email\" : \"\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/search",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 19 - AvgLendingDurationGenreMonthPeriod",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "AvgLendingDurationGenreMonthPeriod - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/lendingsAverageDurationPerMonth?startDate=2024-01-01&endDate=2024-07-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"lendingsAverageDurationPerMonth"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-07-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AvgLendingDurationGenreMonthPeriod - Invalid dates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/lendingsAverageDurationPerMonth?startDate=2024-03-01&endDate=2024-02-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"lendingsAverageDurationPerMonth"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2024-03-01"
												},
												{
													"key": "endDate",
													"value": "2024-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AvgLendingDurationGenreMonthPeriod - Invalid date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function(){\r",
													"\r",
													"    pm.response.to.have.status(400); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/lendingsAverageDurationPerMonth?startDate=2024-31-01&endDate=2024-07-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"lendingsAverageDurationPerMonth"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2024-31-01"
												},
												{
													"key": "endDate",
													"value": "2024-07-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AvgLendingDurationGenreMonthPeriod - Invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Forbidden\", function(){\r",
													"\r",
													"    pm.response.to.have.status(403); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{readerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/genres/lendingsAverageDurationPerMonth?startDate=2024-01-01&endDate=2024-07-01",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"genres",
												"lendingsAverageDurationPerMonth"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-07-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 26 - Get Reader With Quote",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reader by reader number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){",
													"    pm.response.to.have.status(200); ",
													"",
													"    let etagHeader = postman.getResponseHeader(\"ETag\");",
													"    pm.environment.set(\"readerEtag\", etagHeader); ",
													"});",
													"",
													"pm.test(\"Check if 'quote' is not null\", function () {",
													"    pm.expect(pm.response.json().quote).not.to.be.null;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{librarianToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/2024/1",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"2024",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "US 28 - SearchReadersByPhoneNumber",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SearchReadersByPhoneNumber - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OK\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200); \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"page\": {\r\n        \"number\" : 1,\r\n        \"limit\" : 10\r\n    },\r\n    \"query\": {\r\n        \"name\" : \"\",\r\n        \"phoneNumber\" : \"939393939\",\r\n        \"email\" : \"\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/readers/search",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"readers",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "US 30 - GetAverageLendingDurationPerBook",
							"item": [
								{
									"name": "Login as Librarian",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Authtenticates\", function(){\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    let token = postman.getResponseHeader(\"Authorization\");\r",
													"    pm.environment.set(\"librarianToken\", token);    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"maria@gmail.com\",\r\n    \"password\": \"Mariaroberta!123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{baseUrl}}/public/login",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"public",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAverageLendingDurationPerBook",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{baseUrl}}/books/9789720706386/avgDuration",
											"host": [
												"{{host}}{{baseUrl}}"
											],
											"path": [
												"books",
												"9789720706386",
												"avgDuration"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{librarianToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Api Ninjas",
			"item": [
				{
					"name": "Historical Events",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "a5nSlaa4JxIubY09H+NYuQ==cY9FegnFmAvYi6fN"
							}
						],
						"url": {
							"raw": "https://api.api-ninjas.com/v1/historicalevents?year=2001&month=1",
							"protocol": "https",
							"host": [
								"api",
								"api-ninjas",
								"com"
							],
							"path": [
								"v1",
								"historicalevents"
							],
							"query": [
								{
									"key": "year",
									"value": "2001"
								},
								{
									"key": "month",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Jokes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "a5nSlaa4JxIubY09H+NYuQ==cY9FegnFmAvYi6fN"
							}
						],
						"url": {
							"raw": "https://api.api-ninjas.com/v1/jokes?limit=1",
							"protocol": "https",
							"host": [
								"api",
								"api-ninjas",
								"com"
							],
							"path": [
								"v1",
								"jokes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Joke Api",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://v2.jokeapi.dev/joke/Any?type=single",
					"protocol": "https",
					"host": [
						"v2",
						"jokeapi",
						"dev"
					],
					"path": [
						"joke",
						"Any"
					],
					"query": [
						{
							"key": "type",
							"value": "single"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}